<?js
    
    // Options
    // ----
    // memberof: boolean
    // arguments: boolean
    // returns: boolean
    // type: boolean
    // constructor: boolean
    
    // Define default options for the partial
    var optMemberof = (typeof memberof === 'boolean') ? memberof : false;
    var optArguments = (typeof arguments === 'boolean') ? arguments : doc.kind == 'function';
    var optReturns = (typeof returns === 'boolean') ? returns : true;
    var optType = (typeof type === 'boolean') ? type : true;
    var optConstructor = (typeof constructor == 'boolean') ? constructor : true;
    var optAugments = (typeof augments == 'boolean') ? augments : false;
?>
<span class="signature">
    <?js if (optConstructor && doc.kind == "class") { ?>
        <span class="signature-prefix">new </span>
    <?js } ?>
    <?js if (optMemberof && doc.memberof) { ?>
        <span class="signature-memberof">
            <a href="<?js= doc.memberof.href ?>"><?js= doc.memberof.name ?></a>
            <span class="signature-punctuation">.</span>
        </span>
    <?js } ?>
    <span class="signature-name"><?js= doc.name ?></span>
    
    <?js if (optArguments && ['class', 'function'].includes(doc.kind)) { ?>
        <span class="signature-punctuation">(</span>
        <?js doc.params?.forEach((p, index, arr) => { ?>
            <span class="signature-param"><?js= p.name ?><?js= index == arr.length - 1 ? '' : ', ' ?></span>
        <?js }) ?>
        <span class="signature-punctuation">)</span>
    <?js } else if (optAugments == true && doc.augments) { ?>
        <span class="signature-extends">&nbsp;extends&nbsp;</span>
        <?js doc.augments.forEach((name, index, arr) => {
            const href = this.linkTo(name);
            name = href ? `<a href="${href}">${name}</a>` : this.htmlsafe(name) ?>
            
            <span class="signature-augments">
                <?js= name ?>
                <?js= index == arr.length - 1 ? "" : "|" ?>
            </span>
        <?js }) ?>
    <?js } ?>
    
    <?js if (optArguments && ['class', 'function'].includes(doc.kind) && doc.returns) { ?>
        &rarr;
        <?js doc.returns.forEach(r => { ?>
            <span class="signature-returns">
                <?js r.type.names.forEach((name, index, arr) => {
                    const typename = name.match(/\<(\w+)\>/)?.at(1) || name
                    const href = this.linkTo(typename);
                    name = href ? name.replace(`<${typename}>`, `<a href="${href}">&lt;${typename}&gt;</a>`) : this.htmlsafe(name)
                    ?>
                    <?js= name ?>
                    <?js= index == arr.length - 1 ? "" : "|" ?>
                <?js }) ?>
            </span>
        <?js }) ?>
    <?js } ?>
    
    <?js if(optType && doc.kind == "member" && doc.type) { ?>
        <span class="signature-punctuation">: </span>
        <span class="signature-type">
            <?js doc.type.names.forEach((name, index, arr) => {
                const typename = name.match(/\<(\w+)\>/)?.at(1) || name
                const href = this.linkTo(typename);
                name = href ? name.replace(`<${typename}>`, `<a href="${href}">&lt;${typename}&gt;</a>`) : this.htmlsafe(name)
                ?>
                <?js= name ?>
                <?js= index == arr.length - 1 ? "" : "|" ?>
            <?js }) ?>
        </span>
    <?js } ?>
</span>
